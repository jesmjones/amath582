 clear all; close all; clc;
%% Task 1: Through averaging of the Fourier transform and visual inspection, 
%  determine the frequency signature (center frequency) generated by the submarine.

load 'subdata.mat'

% define domain size and vectors
L=10; % length of spatial domain (cube of side L = 2*10)
n=64; % number of grid points/Fourier modes in each direction

% spatial grid in x, y , z directions
t2 = linspace(-L,L,n+1); x=t2(1:n); y=x; z=x;
k = (2*pi/(2*L))*[0:(n/2-1) -n/2:-1]; % 2pi scales the frequencies to Hz, the vector unshifts the frequency domain
ks = fftshift(k);

% 3D Fast Fourier Transform in fourier space
[X,Y,Z]=meshgrid(x,y,z);
[Kx,Ky,Kz]=meshgrid(ks,ks,ks);

% extract timestep data and average FFT results
avg = zeros(n,n,n);
for j = 1:49
    sig(:,:,:) = reshape(d(:,j), n,n,n); %signal
    avg = avg + fftn(sig);
end
%% Task 2: Design and implement a Filter to extract this frequency signature 
% in order to denoise the data and determine the path of the submarine. 
% You can also plot the 3D path of the submarine if you like.

tau = -0.02; %bandwidth
gaussfilter = zeros(n,n,n);
for x=1:64
    for y=1:64
        for z=1:64
            gaussfilter(x,y,z) = exp(tau*((x-kx0).^2+(y-ky0).^2+(z-kz0).^2));
        end
    end
end

% submarine position
xpos = zeros(1,49);
ypos = zeros(1,49);
zpos = zeros(1,49);

for iter = 1:49
    sig(:,:,:) = reshape(d(:,iter),n,n,n);
    sigFFT = fftshift(fftn(sig));
    filtSig = sigFFT .* gaussfilter;
    submarine = ifftn(filtSig);
    [maxV, idx2] = max(submarine(:));
    [xpos(iter),ypos(iter),zpos(iter)] = ind2sub(size(submarine),idx2);
end
%% Task 3: Determine and plot the x,y coordinates of the submarine 
% during the 24 hour period. This information
% can be used to deploy a sub-tracking aircraft to keep an eye on your 
% submarine in the future.

figure(1)
plot3(xpos.*L/n,ypos.*L/n,zpos.*L/n,'b','LineWidth',3)
hold on
plot3(xpos(end)*L/n,ypos(end)*L/n,zpos(end)*L/n,'ro')
title('Submarine in 3D', 'FontSize', 20)
legend('tracking submarine movement','final location', 'FontSize', 14)
text(xpos(end)*L/n,ypos(end)*L/n,zpos(end).*L/n+0.8, '[5.625, 2.65, 8.43]')
xlabel('x-axis')
ylabel('y-axis')
zlabel('z-axis')