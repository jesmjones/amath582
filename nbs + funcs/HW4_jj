{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"HW4_jj","provenance":[],"collapsed_sections":["emgagx-lBV5J","L8OiEuwkZKNF","KRvXhDjzdJWg","VBLhc7ugdOoS"],"authorship_tag":"ABX9TyN1YmfWiPss8NQZ5A+JP/zp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Your goal is to test the performance of spectral clustering and a simple semi-supervised regression algorithm\n","on the 1984 house voting records data set. Download the data set called house-votes-84.data, and the\n","description house-votes-84.names. The data set consists of voting records of 435 members of the House\n","on 16 bills. There are 267 members of the democratic party and 168 members of the republican party. The\n","voting record of each house member on the 16 bills will be our input x while the corresponding output/class\n","ùë¶ is that members party affiliation (republican or democrat embedded as ‚ÄÇ1)."],"metadata":{"id":"mJc_scyXc97x"}},{"cell_type":"markdown","source":["# Load"],"metadata":{"id":"emgagx-lBV5J"}},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KsNvKubBcfZL","executionInfo":{"status":"ok","timestamp":1647057869813,"user_tz":480,"elapsed":1642,"user":{"displayName":"Jessica Jones","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiQTiwI4OogXuV4MlZc9GgYnL3tUW4q1hXSGG53=s64","userId":"00687734461731743668"}},"outputId":"c21f57af-8efb-4c12-82fa-b150d303531c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import numpy as np\n","import scipy.spatial as ss\n","from scipy.sparse import csgraph\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LinearRegression, Ridge\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["Your first task is to import and preprocess the data set. Construct your output vector y by assigning\n","labels {‚àí1, +1} to members of different parties. Then construct the input vectors xùëó corresponding to\n","the voting records of each member by replacing ‚Äôy‚Äô votes with +1, ‚Äôn‚Äô votes with ‚àí1 and ‚Äô?‚Äô with 0.\n","You do not need to center and normalize the data set in this case. This leads to a vector y ‚àà R435 and\n","input matrix ùëã ‚àà R435‚ÄÇ16. Note that we are using the sklearn convention for our ùëã matrix."],"metadata":{"id":"-wvFYHGhdDI3"}},{"cell_type":"code","source":["# Load/Preprocess Data\n","data = np.loadtxt('/content/drive/MyDrive/AMATH/house-votes-84.data', dtype=object, delimiter=',')\n","data[(data == 'republican') | (data == 'n')] = -1.\n","data[(data == 'democrat') | (data == 'y')] = 1.\n","data[data == '?'] = 0\n","X, y = data[:, 1:], data[:, 0]; print(X.shape, y.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JWedkT95cjqJ","executionInfo":{"status":"ok","timestamp":1647048771558,"user_tz":480,"elapsed":693,"user":{"displayName":"Jessica Jones","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiQTiwI4OogXuV4MlZc9GgYnL3tUW4q1hXSGG53=s64","userId":"00687734461731743668"}},"outputId":"804636f3-0d45-422c-f945-cedd5208e1b8"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["(435, 16) (435,)\n"]}]},{"cell_type":"markdown","source":["# Functions"],"metadata":{"id":"L8OiEuwkZKNF"}},{"cell_type":"code","source":["def unnorm_lap(x, s):\n","  '''\n","  Function to calculate unnormalized laplacian matrix, adopted from\n","  https://graphsandnetworks.com/using-laplacians-for-graph-learning/\n","  Unnormalized Lap: L = D-A, needs x to be a square matrix\n","  '''\n","  A = np.exp(-(x**2)/(2 * s**2)).astype(float) # adjacency matrix using the weight function\n","  D = np.diag(np.sum(A, axis=1)) # degree matrix\n","  L = D - A # graph laplacian\n","  lam, Q = np.linalg.eigh(L) # eigenvalues and vectors\n","  '''\n","  it is helpful to plot q1 by re-ordering ùëã according to the original party \n","  affiliations. For example, plot the q1 values for the 168 republicans \n","  first then the 267 democrats. This will nicely visualize the behavior \n","  of q1 on the two clusters.\n","  '''\n","  sort_idx = lam.argsort(); lam_sort = lam[sort_idx] ; Q_sort = Q[:, sort_idx]\n","  return lam_sort, Q_sort\n","\n","def accuracy_(q1, y):\n","  '''\n","  Take sign(q1) as your classifier and compute its classification accuracy after comparison with y\n","  '''\n","  pred = np.sign(q1[:, 1]); correct = np.count_nonzero(pred == y); \n","  accuracy = 1 - ((1 / 435) * correct ); accuracy = max(accuracy, 1 - accuracy)\n","  return accuracy\n","\n","def acc_best(acc):\n","  '''\n","  takes in a list of accuracies for each q1 compared to y \n","  '''\n","  best_accuracy_idx = np.argmax(acc); best_accuracy = accuracies[best_accuracy_idx]; best_sigma = sigs[best_accuracy_idx]\n","  return best_sigma, best_accuracy\n","\n","def plot_acc(s, acc, bs, ba):\n","  fig = plt.figure(figsize=(5,4)); sns.set_context('talk')\n","  plt.scatter(s, acc, label='accuracies')\n","  plt.plot(bs, ba, 'r*', markersize=5, label='optimal sigma')\n","  plt.xlabel('sigma'); plt.ylabel('Classification Accuracy'); plt.legend(); plt.show()\n","\n","def ssl_acc(J, M, Q, y):\n","  '''\n","  Use linear regression (least squares) to find Beta, takes in sign(Q), then take y as predictor\n","  of classes of all points in ùëã, provides a table summarizing the accuracy of y_hat as your classifier\n","  '''\n","  ssl_accs = np.empty((len(J), len(M))) # Results vector of J rows and M columns\n","  model = LinearRegression(fit_intercept=False) #ssl\n","  for ji, j in enumerate(J): # Js\n","      for mi, m in enumerate(M): # Ms\n","          A = Q[0:j, 0:m]; b = y[0:j]; model.fit(A, b) # make A and b and fit on model on them\n","          bs = model.coef_ # coefficients\n","          y_hat = np.sign(np.dot(Q[:, 0:m] , bs)) #predict\n","          correct = np.count_nonzero(y_hat == y); accuracy = 1 - ((1 / 435) * correct) # how many are correct and convert to accuracy\n","          ssl_accs[ji, mi] = accuracy # table of accuracies\n","  return 1 - ssl_accs # number accurate vs inaccurate"],"metadata":{"id":"LtpCFF5Ncn5W","executionInfo":{"status":"ok","timestamp":1647058079551,"user_tz":480,"elapsed":316,"user":{"displayName":"Jessica Jones","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiQTiwI4OogXuV4MlZc9GgYnL3tUW4q1hXSGG53=s64","userId":"00687734461731743668"}}},"execution_count":31,"outputs":[]},{"cell_type":"markdown","source":["# (Spectral Clustering): \n","In this step you will mainly work with the matrix ùëã and use y for validation of your clustering algorithm."],"metadata":{"id":"KRvXhDjzdJWg"}},{"cell_type":"code","source":["# compressed-sparse graph, with shape (N, N)\n","# List of accuracies []\n","X_spatial = ss.distance_matrix(X, X, p=2); sigs = np.arange(0.1, 4, step=0.1); accuracies = []\n","for s in sigs: # iterate through all sigma\n","    lam, Q = unnorm_lap(X_spatial, s) # Generate Laplacian\n","    s_acc = accuracy_(Q, y) ; accuracies.append(s_acc)\n","# best accuraciess and plots\n","bs , ba = acc_best(accuracies); plot_acc(sigs, accuracies, bs, ba)\n","print (\"best sigma = \", bs, \"best accuracy = \", ba *100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":318},"id":"LyMmdSNfctsj","executionInfo":{"status":"ok","timestamp":1647057951896,"user_tz":480,"elapsed":3131,"user":{"displayName":"Jessica Jones","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiQTiwI4OogXuV4MlZc9GgYnL3tUW4q1hXSGG53=s64","userId":"00687734461731743668"}},"outputId":"2c01040b-4dba-4ca3-a12d-bedb87a0f6f2"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 360x288 with 1 Axes>"],"image/png":"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PvmE888/n0MPPZT169fz5JNPcvrpp/PNN9/QrJnzp7Rz505OO+00Vq9ezfjx4zn++OP56aefmDlzJvn5+bRo0SKufbz65ptvuOiii7jsssu49NJL6dbNWR7yySefpGfPngwfPpxGjRrx1ltvcfnllxMIBJg4cWLZ8c888wzjx4/nuOOO46abbqJFixZ88cUXzJ07lxEjRoS95q5duxgwYACbN2/m97//Pe3bt2fBggVcddVVbN++nVtuuQWAp556iiuvvJJx48YxadIkdu/ezfLly1myZAkXXnih5/daq6lqXA9gFzDO/bkpEABGhWwfDxTFe77a+AB2ZGVlqUmu9evX6/r16xNyrv2lAR32yCI9/I9va8frKz8O/+PbOuyRRbq/NJCQ68Wye/fuSmWffvqpAvr888+XlU2ZMkUBffPNNyvtHwgE4t7nlltuUefPury8vDwFdN26dWVlHTt2VEA/+OCDuOIeOnSoHnHEEWWvd+zYoRkZGdq3b18tLi4OG0/wOqNHjy57fdttt2mLFi107dq15Y75/e9/r+np6bpt2zZVVT333HP17LPPrhRHbRTrdzgrK0uBHRoh93hpmvgvzsKeqLNK8s/ACSHbu7rJ2hjffLj6Z1ZsKCRSC0RAYcWGQhat3pKUeJo2bVr28759+8jPz+fII4+kZcuWfPnll2XbZs6cyQknnMAvfvGLSucINjXEs49XXbp04Ywzzogad0FBAVu3bmXAgAGsXbuWggJnypn333+foqIibrjhBtLSyn/DiBbPa6+9xoABA2jRogVbt24tewwZMoTi4mKWLFkCOFNHrly5klWrVlXpvdUlXhLxJ8DgkNdvApNE5GYRmQpMBBYmLjRjvJu1bCMpMXJSisCsZckZjb9nzx5uvvlmDjvsMNLS0mjdujVt2rRhx44dZQkNYO3atRx99NFRzxXPPl4dfvjhYcsXL17M4MGDad68OS1btqRNmzbceOONAGVxr127FsBzTGvWrOHtt9+mTZs25R4jR44EYMsW5z/J66+/nv3799O9e3d69OjB1VdfzdKlS6v0Pms7L23ETwC5ItLUrRHfhDMH8VR3+0qcG3rG+Ca/qCRibTgooJC/qyQp8VxxxRXk5eUxadIkTjnlFLKyshARzj//fAKBQMKvF6kmWloafj6u0Jpv0Pfff8+gQYPo1q0bDzzwAIcddhhN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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["best sigma =  2.1 best accuracy =  88.04597701149426\n"]}]},{"cell_type":"markdown","source":["# (Semi-supervised Learning):"],"metadata":{"id":"VBLhc7ugdOoS"}},{"cell_type":"code","source":["# Run models using Q_opt\n","J = [5, 10, 20, 40] # J values to consider (rows)\n","M = [2, 3, 4, 5, 6] # M values to consider (columns)\n","ssl_acc(J, M, Q, y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IrtzrMpEczV7","executionInfo":{"status":"ok","timestamp":1647058085681,"user_tz":480,"elapsed":297,"user":{"displayName":"Jessica Jones","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiQTiwI4OogXuV4MlZc9GgYnL3tUW4q1hXSGG53=s64","userId":"00687734461731743668"}},"outputId":"0558a042-35ba-4ba8-92c0-14fdf271f348"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.86436782, 0.90574713, 0.68045977, 0.68735632, 0.69885057],\n","       [0.86436782, 0.86666667, 0.92183908, 0.88275862, 0.67356322],\n","       [0.87586207, 0.88735632, 0.91494253, 0.90804598, 0.89195402],\n","       [0.87816092, 0.88965517, 0.90114943, 0.92873563, 0.91724138]])"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["the above visualization trick is also helpful in Step 3,"],"metadata":{"id":"9ioSCe4UdkIh"}},{"cell_type":"code","source":["'''\n","# just in case I need it in this form:\n","\n","features =  ['Class','handicapped-infants', 'water-project-cost-sharing', \n","                    'adoption-of-the-budget-resolution', 'physician-fee-freeze',\n","                    'el-salvador-aid', 'religious-groups-in-schools',\n","                    'anti-satellite-test-ban', 'aid-to-nicaraguan-contras',\n","                    'mx-missle', 'immigration', 'synfuels-corporation-cutback',\n","                    'education-spending', 'superfund-right-to-sue', 'crime',\n","                    'duty-free-exports', 'export-administration-act-south-africa']\n","\n","votes_df = pd.DataFrame(votes, columns=features); X, y = votes_df.iloc[:, 1:], votes_df.iloc[:, 0]\n","\n","'''"],"metadata":{"id":"6SQb5zZTl-Ry"},"execution_count":null,"outputs":[]}]}